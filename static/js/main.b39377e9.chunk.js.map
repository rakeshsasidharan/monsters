{"version":3,"sources":["Components/Card/card.component.jsx","Components/CardList/card-list.component.jsx","Components/SearchBox/searchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","changeHandler","type","onChange","App","handleChange","e","this","setState","search","target","value","state","bind","fetch","then","response","json","user","filteredMonster","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6TAEaA,G,YAAO,SAASC,GACzB,OACI,yBAAKC,UAAY,kBACb,yBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCLrBC,EAAW,SAASR,GAC7B,OACI,yBAAKC,UAAY,aAEbD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACtB,kBAAC,EAAD,CAAMO,IAAOP,EAAQC,GAAID,QAAWA,SCPvCQ,G,MAAY,YAAuC,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,cAC5C,OACI,2BACIb,UAAU,SACZc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC+BLG,G,wDAlCb,aAAc,IAAD,8BACX,gBAcFC,aAAe,SAASC,GACtBC,KAAKC,SAAS,CAACC,OAAQH,EAAEI,OAAOC,SAdhC,EAAKC,MAAQ,CACThB,SAAS,GACTa,OAAO,IAEX,EAAKJ,aAAe,EAAKA,aAAaQ,KAAlB,gBANT,E,gEASO,IAAD,OACnBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAG,EAAKV,SAAS,CAACZ,SAASsB,S,+BAO7B,IAAD,EACoBX,KAAKK,MAAzBhB,EADA,EACAA,SAAUa,EADV,EACUA,OACXU,EAAkBvB,EAASwB,QAAO,SAAA7B,GAAO,OAC7CA,EAAQE,KAAK4B,cAAcC,SAASb,EAAOY,kBAE7C,OACE,yBAAKjC,UAAU,OACb,mDACA,kBAAC,EAAD,CAAWY,YAAa,kBAAkBC,cAAiBM,KAAKF,eAChE,kBAAC,EAAD,CAAUT,SAAWuB,S,GA7BXI,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b39377e9.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css'\nexport const Card = function(props){\n    return (\n        <div className = 'card-container'>\n            <img \n                alt='monster'\n                src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n                />\n                <h2>{props.monster.name}</h2>\n                <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react';\nimport './card-list.style.css';\nimport {Card} from '../Card/card.component';\n\n\nexport const CardList = function(props){\n    return (\n        <div className = \"card-list\">\n        {\n            props.monsters.map(monster => (\n                <Card key = {monster.id} monster = {monster}/>\n              ))\n        }\n        </div>\n    ) ; \n}\n","import React from 'react';\nimport './searchBox.style.css'\n\nexport const SearchBox = function({placeholder, changeHandler}){\n    return(\n        <input \n            className='search'\n          type='search' \n          placeholder={placeholder}\n          onChange={changeHandler}\n          ></input>\n    )\n}","import React,{ Component } from 'react';\nimport {CardList} from './Components/CardList/card-list.component';\nimport {SearchBox} from './Components/SearchBox/searchBox.component';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n        monsters:[]\n      , search:''\n    };\n    this.handleChange = this.handleChange.bind(this);\n}\n\n  componentDidMount(){\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(user=> this.setState({monsters:user}))\n  }\n\n  handleChange = function(e){\n    this.setState({search: e.target.value})\n  }\n\n  render() {  \n    const {monsters, search} = this.state ; \n    const filteredMonster = monsters.filter(monster=>\n      monster.name.toLowerCase().includes(search.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters University</h1>\n        <SearchBox placeholder =\"Search Monsters\" changeHandler = {this.handleChange} ></SearchBox>\n        <CardList monsters= {filteredMonster}></CardList>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}